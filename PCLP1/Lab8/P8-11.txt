#include <stdio.h>

void sortare(int v[], int n)
{
    for (int i = 0; i < n-1; i++)
        for (int j = i+1; j < n; j++)
            if (v[i] > v[j])
            {
                int aux = v[i];
                v[i] = v[j];
                v[j] = aux;
            }
}

void cauta(int M[21][21], int m, int n, int i, int j, int *dimensiune)
{
    if (i < 0 || i >= m || j < 0 || j >= n || M[i][j] == 0) return; //verif daca elem curent este in interiorul matricei si ca nu are valoarea 0

    M[i][j] = 0; //marcam elementul curent ca fiind vizitat
    (*dimensiune)++; //marim dimensiunea obiectului cu 1 (elem vizitat care M fost valid adica = 1)

    cauta(M, m, n, i - 1, j, dimensiune); //nord
    cauta(M, m, n, i + 1, j, dimensiune); //sud
    cauta(M, m, n, i, j - 1, dimensiune); //vest
    cauta(M, m, n, i, j + 1, dimensiune); //est
}

int main()
{
    int m, n;
    int M[21][21];
    scanf("%d", &m);
    scanf("%d", &n);

    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &M[i][j]);

    int nrObiecte = 0;
    int S[101]; // Aici vom stoca suprafetele obiectelor

    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            if (M[i][j] == 1)
            {
                int dimensiune = 0;
                cauta(M, m, n, i, j, &dimensiune);
                S[nrObiecte] = dimensiune;
                nrObiecte++;
            }

    sortare(S, nrObiecte);

    for (int i = 0; i < nrObiecte; i++)
        printf("%d\n", S[i]);

    return 0;
}
