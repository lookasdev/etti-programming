Să se modifice problema rezolvată nr. 2, astfel încât să stocheze şi să calculeze, pentru fiecare fişier audio, și histograma normalizată, conform formulei:
histnorm(i)=maxim−hist(i)maxim−minim
unde hist(i)
 este frecvenţa de apariţie a elementului de indice i
 în vector (secvenţa audio), maxim
 şi minim
 reprezintă frecvenţa maximă, respectiv minimă a vectorului. De data aceasta, valorile secvenței audio vor fi de valoare maxim 10.



Date de intrare:
- nr de fisiere (int)
- pentru fiecare fisier:
- numele fisierului (sir de caractere)
- valorile secventei audio (10 nr. intregi)

Date de iesire:
- pentru fiecare fisier, in ordinea citirii de la tastatura:
- valorile histogramei secventei audio normalizate (11 nr. reale cu 2 zecimale)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct fisier{
    char nume[20];
    int secv_audio[10];
    int histograma[11];
    float histograma_norm[11];
};

void citire_fisier(struct fisier * p) {
    scanf("%s", p->nume);
    for(int i = 0; i < 10; i++) {
        scanf("%d", p->secv_audio + i);
    }
}

void printare_histograma_norm(struct fisier * p) {
    for(int i = 0; i < 11; i++) {
        printf("%.2f ", *(p->histograma_norm + i));
    }
    printf("\n");
}

void calcul_histograma_norm(struct fisier * p) {
    for(int i = 0; i < 11; i++) {
        p->histograma[i] = 0;
    }
    
    for(int i = 0; i < 10; i++) {
        p->histograma[p->secv_audio[i]]++;
        //p->histograma[*(p->secv_audio + i)]++;
    }
    
    int maxx = -1;
    int minn = 11;
    for(int i = 0; i < 11; i++) {
        if (p->histograma[i] > maxx) maxx = p->histograma[i];
        //if (p->histograma[i] < minn && p->histograma[i] > 0) minn = p->histograma[i]; // daca o valoare nu apare deloc in secv audio histograma[valoare] va fi == 0
        if (p->histograma[i] < minn) minn = p->histograma[i]; // fara conditia de mai sus
    }
    
    for(int i = 0; i < 11; i++) {
        if (maxx != minn) { // evitam impartirea la 0
            p->histograma_norm[i] = (float)(maxx - p->histograma[i]) / (maxx - minn);
        } else {
            p->histograma_norm[i] = 0.0; // daca max == min toate valorile sunt egale
        }
    }
}

int main() {
    int nr;
    scanf("%d", &nr);
    struct fisier* fisiere = (struct fisier*)malloc(nr * sizeof(struct fisier));
    
    for(int i = 0; i < nr; i++) {
        citire_fisier(fisiere + i);
        calcul_histograma_norm(fisiere + i);
        printare_histograma_norm(fisiere + i);
    }
    
    free(fisiere);
    return 0;
}
