Se citesc de la tastatură:
- un întreg m (m <= 20);
- un întreg n;
- o secvență de n numere întregi.
Cele n numere întregi vor fi stocate într-un hashmap de dimensiune m. Pentru a obține indexul locului (bucket) unde valoarea va fi introdusă, se împarte valoarea întregului curent la dimensiunea hashmap-ului, iar restul împărțirii reprezintă valoarea indexului. 

Coliziunile vor fi gestionate prin metoda "open addressing": dacă pe poziția (bucket) în care ar trebui să fie introdus un întreg se găsește deja o valoare, atunci se va avansa la următorul bucket și se va încerca introducerea în hashmap. Dacă și această poziție este ocupată, se va avansa la următoarea, etc., până când se va găsi un bucket disponibil. Pentru a accesa un element, se calculează hash-ul elementului respectiv și se caută elementul pe poziția dată de hash. Dacă nu se găsește acolo, atunci se încearcă la următoarea poziție, etc., până la găsirea lui.

Să se afișeze pe ecran toate valorile din hashmap sub forma:
<indice_bucket>: <valoare>

#include <stdio.h>
#include <stdlib.h>

void initializeHashMap(int* hashmap, int m) {
    for (int i = 0; i < m; i++) {
        hashmap[i] = -1;
    }
}

int insertIntoHashMap(int* hashmap, int m, int value) {
    int index = value % m;
    if (index < 0) {
        index += m; // Asigură index pozitiv pentru numere negative
    }
    
    int startIndex = index;
    do {
        if (hashmap[index] == -1) {
            hashmap[index] = value;
            return 1; // Inserție reușită
        }
        index = (index + 1) % m;
    } while (index != startIndex);

    return 0; // Inserție eșuată (hashmap plin)
}

int searchInHashMap(int* hashmap, int m, int value) {
    int index = value % m;
    if (index < 0) {
        index += m;
    }

    int startIndex = index;
    do {
        if (hashmap[index] == -1) {
            return -1; // Valoarea nu este în hashmap
        }
        if (hashmap[index] == value) {
            return index; // Găsit
        }
        index = (index + 1) % m;
    } while (index != startIndex);

    return -1; // Valoarea nu este în hashmap
}

void displayHashMap(int* hashmap, int m) {
    for (int i = 0; i < m; i++) {
        if (hashmap[i] == -1) {
            printf("%d: \n", i);
        } else {
            printf("%d: %d\n", i, hashmap[i]);
        }
    }
}

int main() {
    int m, n;

    // printf("Introduceți dimensiunea hashmap-ului (m <= 20): ");
    scanf("%d", &m);
    if (m > 20) {
        // printf("Dimensiunea hashmap-ului nu poate fi mai mare decât 20.\n");
        return 1;
    }

    // printf("Introduceți numărul de elemente (n): ");
    scanf("%d", &n);

    int* hashmap = (int*)malloc(m * sizeof(int));
    if (hashmap == NULL) {
        // printf("Eroare la alocarea memoriei.\n");
        return 1;
    }

    initializeHashMap(hashmap, m);

    // printf("Introduceți cele %d numere întregi:\n", n);
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        if (!insertIntoHashMap(hashmap, m, value)) {
            // printf("Hashmap-ul este plin. Nu se poate introduce valoarea %d.\n", value);
        }
    }

    // printf("\nConținutul hashmap-ului:\n");
    displayHashMap(hashmap, m);

    free(hashmap);
    return 0;
}