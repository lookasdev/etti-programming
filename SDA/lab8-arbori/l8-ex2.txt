Se introduc de la tastatură numere întregi pozitive, până la întâlnirea markerului de sfârșit al streamului. Să se ordoneze secvența de numere, folosind arbori, în următorul fel:

Toate numerele pare să fie plasate la început, ordonate crescător;
Apoi la sfârșit toate numerele impare, ordonate descrescător.
Date de intrare
Valorile se dau la intrare sperate printr-unul sau mai multe caractere whitespace.

Exemplu:

8 3 17 32 6 38 4 9 83 4 5
7 1 9 5 383 6 7 8
Date de ieșire
La ieșire se vor scrie numerele ordonate corespunzător, separate prin unul sau mai multe caractere whitespace.

Exemplu (pentru intrarea de mai sus):

 4 4 6 6 8 8 32 38 383 83 17 9 9 7 7 5 5 3 1

#include <stdio.h>
#include <stdlib.h>

// Structura unui nod de arbore
typedef struct NOD {
    int value;
    struct NOD *left;
    struct NOD *right;
} NOD;

// Funcție pentru crearea unui nod nou
NOD* createNode(int value) {
    NOD* newNode = (NOD*)malloc(sizeof(NOD));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Funcție pentru inserarea unui nod într-un arbore binar
NOD* insert(NOD* root, int value) {
    if (root == NULL)
        return createNode(value);

    if (value < root->value)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);

    return root;
}

// Funcție pentru parcurgerea inorder a arborelui
void inorder(NOD* root, int reverse) {
    if (root == NULL)
        return;

    if (!reverse) {
        inorder(root->left, reverse);
        printf("%d ", root->value);
        inorder(root->right, reverse);
    } else {
        inorder(root->right, reverse);
        printf("%d ", root->value);
        inorder(root->left, reverse);
    }
}

// Funcție principală
int main() {
    NOD *evenTree = NULL;
    NOD *oddTree = NULL;
    int number;

    // Citirea numerelor din input
        while (scanf("%d", &number) != EOF) {
        if (number % 2 == 0)
            evenTree = insert(evenTree, number); // Arbore pentru numere pare
        else
            oddTree = insert(oddTree, number); // Arbore pentru numere impare
    }

    // Afișarea numerelor sortate
    inorder(evenTree, 0);  // Parcurgere crescătoare pentru numere pare
    inorder(oddTree, 1);   // Parcurgere descrescătoare pentru numere impare

    return 0;
}
