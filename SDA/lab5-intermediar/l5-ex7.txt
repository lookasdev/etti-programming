#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//player struct
//let's also memorize the full 7 cards to make everything easier
//and members for best cards, the number of points, etc
struct JUCATOR {
    char name [20];
    int hand_cards [2];
    int total_cards [7];
    int best_cards [5];
    int hand_points;
};

void print_players(struct JUCATOR * players, int nmb) {
    for (int i = 0; i < nmb; i++) {
        printf("%s\n", (players + i)->name);
        printf("%d %d \n", (players + i)->hand_cards[0], (players + i)->hand_cards[1]);
    }
}

void join_cards(struct JUCATOR * players, int nmb, int * common_cards) {
    for (int i = 0; i < nmb; i++) {
        //go element by element, or do the memcpy thing
        memcpy(&players[i].total_cards, &players[i].hand_cards, 2 * sizeof(int));
        memcpy(&players[i].total_cards[2], common_cards, 5 * sizeof(int));
    }
}

int player_compare(struct JUCATOR a, struct JUCATOR b, int nr_cards) {
    if (a.hand_points < b.hand_points) {
        return 1;
    } else if (a.hand_points > b.hand_points) {
        return 0;
    } else {
        for (int i = nr_cards - 1; i >= 0; i--) {
            if (a.best_cards[i] < b.best_cards[i]) {
                return 1;
            }
            else if (a.best_cards[i] > b.best_cards[i]) {
                return 0;
            }
        }
    }
    
    return 0;
}

void sort(int* ptr, int nr_elemente) 
{ 
    int i, j, temp; 
  
    // Sortare folosind pointeri catre elemente
    for (i = 0; i < nr_elemente - 1; i++) { 
  
        for (j = i + 1; j < nr_elemente; j++) { 
  
            if (*(ptr + j) < *(ptr + i)) { 
  
                temp = *(ptr + i); 
                *(ptr + i) = *(ptr + j); 
                *(ptr + j) = temp; 
            } 
        } 
    } 
}

void sort_players(struct JUCATOR * players, int nr_players, int nr_cards) {
    for (int i = 0; i < nr_players - 1; i++) {
        for (int j = i+1; j < nr_players; j++) {
            if (player_compare(players[i], players[j], nr_cards)) {
                struct JUCATOR temp;
                memcpy(&temp, &players[i], sizeof(struct JUCATOR));
                memcpy(&players[i], &players[j], sizeof(struct JUCATOR));
                memcpy(&players[j], &temp, sizeof(struct JUCATOR));
            }
        }
    }
}

void zero_doubled(int* ptr, int nr_elemente) {
    for (int i = 0; i < nr_elemente - 1; i++) {
        if (*(ptr + i) == *(ptr + i + 1)) {
            *(ptr + i) = 0;
        }
    }
}

void check_chinta(struct JUCATOR juc, int nr_cards) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 4; j++) {
            if (juc.total_cards[i + j + 1] - juc.total_cards[i + j] != 1)
                break;
            if ((j == 3) && juc.total_cards[i + j + 1] - juc.total_cards[i + j] == 1) {
                printf("%s\n", juc.name);
                printf("%d %d %d %d %d \n", juc.total_cards[i], juc.total_cards[i + 1], juc.total_cards[i + 2],
                    juc.total_cards[i + 3], juc.total_cards[i + 4]);
            }
        }
    }
}

void compute_best(struct JUCATOR * juc, int nr_cards) {
    int completed = 0;
    juc->hand_points = 0;
    //check triplets
    for (int i = nr_cards - 1; i > 1; i--) {
        if (juc->total_cards[i] == juc->total_cards[i - 1] && juc->total_cards[i] == juc->total_cards[i - 2]) {
            juc->best_cards[completed] = juc->total_cards[i];
            juc->best_cards[completed + 1] = juc->total_cards[i];
            juc->best_cards[completed + 2] = juc->total_cards[i];
            juc->total_cards[i] = 0;
            juc->total_cards[i - 1] = 0;
            juc->total_cards[i - 2] = 0;
            completed = 3;
            juc->hand_points = 3;
            
            break;
        }
    }
    //check doubles
    for (int i = nr_cards - 1; i > 0; i--) {
        if (juc->total_cards[i] == juc->total_cards[i - 1] && juc->total_cards[i] != 0) {
            juc->best_cards[completed] = juc->total_cards[i];
            juc->best_cards[completed + 1] = juc->total_cards[i];
            juc->total_cards[i] = 0;
            juc->total_cards[i - 1] = 0;
            juc->hand_points += 1;
            
            //already has 3 cards saved from triples
            if (completed == 3) {
                completed = 5;
                break;
            }
            //no triples, this is the first pair seen
            else if (completed == 0) {
                completed = 2;
            }//no triples, but already found a double
            else {
                completed = 4;
                break;
            }
        }
    }
    //add the rest of the cards
    for (int i = nr_cards - 1; i >= 0; i--) {
        if (completed > 4)
            return;
        if (juc->total_cards[i] != 0) {
            juc->best_cards[completed] = juc->total_cards[i];
            completed++;
        }
    }
}

int main()
{
    //vector pentru cartile comune
    int common_cards [5];
    
    //numarul jucatorilor
    int n;
    scanf("%d", &n);
    
    struct JUCATOR * players = (struct JUCATOR *)malloc(n * sizeof(struct JUCATOR));
    if (players == NULL) {
        printf("allocation error");
        exit(0);
    }
    for (int i = 0; i < n; i++) {
        scanf("%s", (players + i)->name);
        scanf("%d %d", &players[i].hand_cards[0], &players[i].hand_cards[1]);
    }
    
    scanf("%d %d %d %d %d", &common_cards[0], &common_cards[1], &common_cards[2], 
        &common_cards[3], &common_cards[4]);
        
    int cmd = 0;
    scanf("%d", &cmd);
    switch(cmd) {
        case 1:{
            print_players(players, n);
            for (int i = 0; i < 5; i++){
                printf("%d ", common_cards[i]);
            }
            printf("\n");
            break;
        }
        case 2: {
            join_cards(players, n, common_cards);
            for (int i = 0; i < n; i++) {
                sort(players[i].total_cards, 7);
                zero_doubled(players[i].total_cards, 7);
                sort(players[i].total_cards, 7);
            }
            
            for (int i = 0; i < n; i++) {
                check_chinta(players[i], 7);
            }
            join_cards(players, n, common_cards);
            break;
        }
        case 3: {
            join_cards(players, n, common_cards);
            for (int i = 0; i < n; i++) {
                sort(players[i].total_cards, 7);
                compute_best(&players[i], 7);
                sort(players[i].best_cards, 5);
            }
            for (int i = 0; i < n; i++) {
                printf("%s\n", players[i].name);
                printf("%d %d %d %d %d \n", players[i].best_cards[0], players[i].best_cards[1], players[i].best_cards[2],
                        players[i].best_cards[3], players[i].best_cards[4]);
            }
            break;
        }
        case 4: {
            join_cards(players, n, common_cards);
            for (int i = 0; i < n; i++) {
                sort(players[i].total_cards, 7);
                compute_best(&players[i], 7);
                sort(players[i].best_cards, 5);
            }
            sort_players(players, n, 5);
            
            for (int i = 0; i < n; i++) {
                printf("%s\n", players[i].name);
            }
            
        }
        default:{
            break;
        }
    }
        
    if (players != NULL)
        free(players);
}