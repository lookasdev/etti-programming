main.c:

#include "list.h"
#include<stdlib.h>
#include<stdio.h>

struct ListTemplate {
    struct ListTemplate* next;
    int value;
};

LIST(list);

int main()
{
    list_init(list);

    struct ListTemplate* HEAD, * TAIL, *CurrentNode;
    // Usually, you will define and call a function that creates and reads each node. Here, we will manually create them as it is easier to follow in this short example.
    struct ListTemplate* Node1 = (struct ListTemplate*)malloc(sizeof(struct ListTemplate));
    struct ListTemplate* Node2 = (struct ListTemplate*)malloc(sizeof(struct ListTemplate));
    struct ListTemplate* Node3 = (struct ListTemplate*)malloc(sizeof(struct ListTemplate));
    struct ListTemplate* Node4 = (struct ListTemplate*)malloc(sizeof(struct ListTemplate));
    struct ListTemplate* Node5 = (struct ListTemplate*)malloc(sizeof(struct ListTemplate));

    Node1->value = 1;
    Node2->value = 2;
    Node3->value = 3;
    Node4->value = 4;
    Node5->value = 5;
    
    // Add Node1 and Node2 to the list
    list_append(list, Node1);
    printf("Adding Node1 to the end of the list. The length of the list is %d\n", list_length(list));
    list_append(list, Node2);
    printf("Adding Node2 to the end of the list. The length of the list is %d\n", list_length(list));

    // Get the first node
    HEAD = list_head(list);
    printf("Printing head: %d\n", HEAD->value);
    
    // Add Node3 at the beginning of the list
    list_push(list, Node3);
    printf("Adding Node3 to the beginning of list. The length of the list is %d\n", list_length(list));

    HEAD = list_head(list);
    printf("Printing the new head: %d\n", HEAD->value);

    // Get the last node
    TAIL = list_tail(list);
    printf("Printing tail: %d\n", TAIL->value);
    
    // Add Node4 to the end of the list
    list_append(list, Node4);
    printf("Adding Node4 to the end of the list. The length of the list is %d\n", list_length(list));
    TAIL = list_tail(list);
    printf("Printing the new tail: %d\n", TAIL->value);

    printf("Pops the head and removes it from the list. ");
    list_pop_head(list);

    HEAD = list_head(list);
    printf("Printing the new head: %d\n", HEAD->value);

    printf("Pops the tail and removes it from the list. ");
    list_pop_tail(list);

    TAIL = list_tail(list);
    printf("Printing the new tail: %d\n", TAIL->value);

    printf("Printing the whole list:\n");
    for (CurrentNode = list_head(list); CurrentNode != NULL; CurrentNode = list_item_next(CurrentNode)) {
        printf("List element number %d\n", CurrentNode->value);
    }

    printf("Adding the deleted Node3 immediately after the node that contains the value 1:\n");
    for (CurrentNode = list_head(list); CurrentNode != NULL; CurrentNode = list_item_next(CurrentNode)) {
        if(CurrentNode->value == 1)
            list_insert(list, CurrentNode, Node3);
    }

    printf("Printing the whole list:\n");
    for (CurrentNode = list_head(list); CurrentNode != NULL; CurrentNode = list_item_next(CurrentNode)) {
        printf("List element number %d\n", CurrentNode->value);
    }

    return 0;
}

list.h:


 /**
  * \file
  * Linked list manipulation routines.
  *
  */

      /**
       *
       * The linked list library provides a set of functions for
       * manipulating linked lists.
       *
       * A linked list is made up of elements where the first element 
       * must be a pointer. This pointer is used by the linked list library
       * to form lists of the elements.
       *
       * Lists are declared with the LIST() macro. The declaration specifies
       * the name of the list that later is used with all list functions.
       *
       * Lists can be manipulated by inserting or removing elements from
       * either sides of the list (list_push(), list_append(), list_pop(),
       * list_chop()). A specified element can also be removed from inside a
       * list with list_remove(). The head and tail of a list can be
       * extracted using list_head() and list_tail(), respectively.
       *
       */

#ifndef LIST_H_
#define LIST_H_

#define LIST_CONCAT(s1, s2) s1##s2

       /**
        * Declare a linked list.
        *
        * This macro declares a linked list with the specified type. The
        * type must be a structure ( struct) with its first element
        * being a pointer. This pointer is used by the linked list library to
        * form the linked lists.
        *
        * The list variable is declared as static to make it easy to use in a
        * single C module without unnecessarily exporting the name to other
        * modules.
        *
        * \param name The name of the list.
        */
#define LIST(name) \
         static void *LIST_CONCAT(name,_list) = NULL; \
         static list_t name = (list_t)&LIST_CONCAT(name,_list)

        /**
         * Declare a linked list inside a structure declaraction.
         *
         * This macro declares a linked list with the specified  type. The
         * type must be a structure (struct) with its first element
         * being a pointer. This pointer is used by the linked list library to
         * form the linked lists.
         *
         * Internally, the list is defined as two items: the list itself and a
         * pointer to the list. The pointer has the name of the parameter to
         * the macro and the name of the list is a concatenation of the name
         * and the suffix "_list". The pointer must point to the list for the
         * list to work. Thus the list must be initialized before using.
         *
         * The list is initialized with the LIST_STRUCT_INIT() macro.
         *
         * \param name The name of the list.
         */
#define LIST_STRUCT(name) \
         void *LIST_CONCAT(name,_list); \
         list_t name

         /**
          * Initialize a linked list that is part of a structure.
          *
          * This macro sets up the internal pointers in a list that has been
          * defined as part of a struct. This macro must be called before using
          * the list.
          *
          * \param struct_ptr A pointer to the struct
          * \param name The name of the list.
          */
#define LIST_STRUCT_INIT(struct_ptr, name)                              \
    do {                                                                \
       (struct_ptr)->name = &((struct_ptr)->LIST_CONCAT(name,_list));   \
       (struct_ptr)->LIST_CONCAT(name,_list) = NULL;                    \
       list_init((struct_ptr)->name);                                   \
    } while(0)

          /**
           * The linked list type.
           *
           */
typedef void** list_t;

void  list_init(list_t list);
void* list_head(list_t list);
void* list_tail(list_t list);
void* list_pop_head(list_t list);
void  list_push(list_t list, void* item);
void* list_pop_tail(list_t list);
void  list_append(list_t list, void* item);
void  list_remove(list_t list, void* item);
int   list_length(list_t list);
void  list_copy(list_t dest, list_t src);
void  list_insert(list_t list, void* previtem, void* newitem);
void* list_item_next(void* item);

#endif
/* LIST_H_ */

list.c:


 /**
  * \file
  * Linked list library implementation.
  *
  */

#include "list.h"

#define NULL 0

struct list {
    struct list* next;
};

/*---------------------------------------------------------------------------*/
/**
 * Initialize a list.
 *
 * This function initalizes a list. The list will be empty after this
 * function has been called.
 *
 * \param list The list to be initialized.
 */
void list_init(list_t list)
{
    *list = NULL;
}
/*---------------------------------------------------------------------------*/
/**
 * Get a pointer to the first element of a list.
 *
 * This function returns a pointer to the first element of the
 * list. The element will \b not be removed from the list.
 *
 * \param list The list.
 * \return A pointer to the first element on the list.
 *
 * \sa list_tail()
 */
void* list_head(list_t list)
{
    return *list;
}
/*---------------------------------------------------------------------------*/
/**
 * Duplicate a list.
 *
 * This function duplicates a list by copying the list reference, but
 * not the elements.
 *
 * \note This function does \b not copy the elements of the list, but
 * merely duplicates the pointer to the first element of the list.
 *
 * \param dest The destination list.
 * \param src The source list.
 */
void list_copy(list_t dest, list_t src)
{
    *dest = *src;
}
/*---------------------------------------------------------------------------*/
/**
 * Get the tail of a list.
 *
 * This function returns a pointer to the elements following the first
 * element of a list. No elements are removed by this function.
 *
 * \param list The list
 * \return A pointer to the element after the first element on the list.
 *
 * \sa list_head()
 */
void* list_tail(list_t list)
{
    struct list* l;

    if (*list == NULL) {
        return NULL;
    }

    for (l = *list; l->next != NULL; l = l->next);

    return l;
}
/*---------------------------------------------------------------------------*/
/**
 * Add an item at the end of a list.
 *
 * This function adds an item to the end of the list.
 *
 * \param list The list.
 * \param item A pointer to the item to be added.
 *
 * \sa list_push()
 *
 */
void list_append(list_t list, void* item)
{
    struct list* l;

    /* Make sure not to add the same element twice */
    list_remove(list, item);

    ((struct list*)item)->next = NULL;

    l = list_tail(list);

    if (l == NULL) {
        *list = item;
    }
    else {
        l->next = item;
    }
}
/*---------------------------------------------------------------------------*/
/**
 * Add an item to the start of the list.
 */
void list_push(list_t list, void* item)
{
    /*  struct list *l;*/

    /* Make sure not to add the same element twice */
    list_remove(list, item);

    ((struct list*)item)->next = *list;
    *list = item;
}
/*---------------------------------------------------------------------------*/
/**
 * Remove the last object on the list.
 *
 * This function removes the last object on the list and returns it.
 *
 * \param list The list
 * \return The removed object
 *
 */
void* list_pop_tail(list_t list)
{
    struct list* l, * r;

    if (*list == NULL) {
        return NULL;
    }
    if (((struct list*) * list)->next == NULL) {
        l = *list;
        *list = NULL;
        return l;
    }

    for (l = *list; l->next->next != NULL; l = l->next);

    r = l->next;
    l->next = NULL;

    return r;
}
/*---------------------------------------------------------------------------*/
/**
 * Remove the first object on a list.
 *
 * This function removes the first object on the list and returns a
 * pointer to it.
 *
 * \param list The list.
 * \return Pointer to the removed element of list.
 */
 /*---------------------------------------------------------------------------*/
void* list_pop_head(list_t list)
{
    struct list* l;
    l = *list;
    if (*list != NULL) {
        *list = ((struct list*) * list)->next;
    }

    return l;
}
/*---------------------------------------------------------------------------*/
/**
 * Remove a specific element from a list.
 *
 * This function removes a specified element from the list.
 *
 * \param list The list.
 * \param item The item that is to be removed from the list.
 *
 */
 /*---------------------------------------------------------------------------*/
void list_remove(list_t list, void* item)
{
    struct list* l, * r;

    if (*list == NULL) {
        return;
    }

    r = NULL;
    for (l = *list; l != NULL; l = l->next) {
        if (l == item) {
            if (r == NULL) {
                /* First on list */
                *list = l->next;
            }
            else {
                /* Not first on list */
                r->next = l->next;
            }
            l->next = NULL;
            return;
        }
        r = l;
    }
}
/*---------------------------------------------------------------------------*/
/**
 * Get the length of a list.
 *
 * This function counts the number of elements on a specified list.
 *
 * \param list The list.
 * \return The length of the list.
 */
 /*---------------------------------------------------------------------------*/
int list_length(list_t list)
{
    struct list* l;
    int n = 0;

    for (l = *list; l != NULL; l = l->next) {
        ++n;
    }

    return n;
}
/*---------------------------------------------------------------------------*/
/**
 * \brief      Insert an item after a specified item on the list
 * \param list The list
 * \param previtem The item after which the new item should be inserted
 * \param newitem  The new item that is to be inserted
 * \author     Adam Dunkels
 *
 *             This function inserts an item right after a specified
 *             item on the list. This function is useful when using
 *             the list module to ordered lists.
 *
 *             If previtem is NULL, the new item is placed at the
 *             start of the list.
 *
 */
void list_insert(list_t list, void* previtem, void* newitem)
{
    if (previtem == NULL) {
        list_push(list, newitem);
    }
    else {

        ((struct list*)newitem)->next = ((struct list*)previtem)->next;
        ((struct list*)previtem)->next = newitem;
    }
}
/*---------------------------------------------------------------------------*/
/**
 * \brief      Get the next item following this item
 * \param item A list item
 * \returns    A next item on the list
 *
 *             This function takes a list item and returns the next
 *             item on the list, or NULL if there are no more items on
 *             the list. This function is used when iterating through
 *             lists.
 */
void* list_item_next(void* item)
{
    return item == NULL ? NULL : ((struct list*)item)->next;
}
/*---------------------------------------------------------------------------*/