Scrieți o aplicație care să vă ajute să vă puteți configura propriul calculator, în funcție de performanțele componentelor sale și de bugetul disponibil. Aplicația va conține mai multe clase:

clasa Echipament_electronic - va servi drept interfață pentru restul echipamentelor;
clasa Placa_baza - placa de bază a calculatorului;
clasa CPU - procesorul calculatorului;
clasa GPU - procesorul grafic (placa video) al (a) calculatorului;
clasa Stocare - mediul de stocare (HDD/SSD) al calculatorului;
clasa PC - calculatorul propriu-zis. Această clasă va reuni toate componentele individuale.
clasa Manager - o clasă care va procesa toate informațiile și va manipula toate obiectele.


Aplicația va urma un model simplificat (fără RAM, sursă de curent, cooler, periferice, carcasă, etc.) și va trebui să îndeplinească mai multe funcționalități, în buclă, sub forma unui meniu, în funcție de o comandă citită de la tastatură, astfel:

Citire componente. Obiectul din clasa Manager va reține câte un vector pentru fiecare componentă diferită, mai puțin pentru placa de bază, unde se va citi doar o singură intrare. Pentru fiecare dintre componente se vor citi de pe linii succesive:
pret: float - reprezintă prețul componentei;
nume: std::string - reprezintă numele componentei;
tip: std::string; tip poate fi una dintre valorile: placa_baza, cpu, gpu, stocare. În funcție de tipul citit se vor citi suplimentar următoarele informații:
placa_baza:
socket: std::string - reprezintă tipul de socket suportat pentru procesor;
cpu:
socket: std::string - reprezintă tipul de socket al procesorului;
frecventa: int - reprezintă frecvența procesorului;
gpu:
memorie: int - reprezintă memoria procesorului grafic, exprimată în GB;
stocare:
memorie: float - reprezintă spațiul de stocare, exprimat în TB;
Afișare componente. Se vor afișa pe ecran atributele fiecărei componente stocate în obiectul Manager, în următoarea ordine a tipului componentei: placa de bază -> cpu -> gpu -> stocare, cu următoarele detalii pe câte un rând diferit: <tip>, <nume>, <alte date specifice categoriei de componente respective, în ordinea de la punctul 1>, <pret>. Exemplu rând: "gpu, 3080_Ti, 12, 10000".
Configurare PC. Se va citi suplimentar o listă de nume de componente (câte un nume din fiecare tip diferit, cu excepția plăcii de bază, care rămâne la fel ca la punctul 1), care se garantează că se găsește în lista stocată de către Manager și se va configura PC-ul cu aceste componente. Trebuie avut în vedere că placa de bază trebuie să aibă același socket cu cpu. În caz contrar, se va afișa pe ecran mesajul "Placa de baza este incompatibila cu CPU ales." și se va termina programul. Se vor afișa pe ecran componentele PC-ului configurat, sub forma prezentată la punctul 2. La finalul afișării tuturor componentelor se va afișa și prețul total al configurației, pe un rând diferit.
Configurare PC optimă pentru un buget anume. Se va citi suplimentar o valoare întreagă reprezentând bugetul maxim alocat pentru componente. Se vor selecta componentele cu cel mai bun raport calitate-preț pentru a configura PC-ul în limita bugetului alocat și se vor afișa pe ecran, ca la punctul 3. Algoritmul se va parcurge astfel:
se vor ordona toate componentele per categoria din care fac parte, după raportul calitate-pret. Criteriul de calitate se consideră a fi astfel: cpu - frecvența, gpu - memoria, stocare - memoria. Indicație: dacă folosiți algoritmul std::sort, trebuie să supraîncărcați operator< pentru a avea o metodă de a stabili ierarhia elementelor în cadrul unui container;
calculatorul se va configura la început doar cu componentele de preț minim din fiecare categorie, considerând acest punct ca fiind soluția "de buget";
iterativ, se vor face îmbunătățiri ale sistemului schimbând componentele cu versiuni mai bune ale lor, adică cu următoarea variantă din lista ordonată de componente din categoria respectivă, cu condiția să nu se depășească bugetul. Se va stabili următoarea ordine a priorității upgrade-urilor: gpu >> cpu >> stocare. Altfel spus, se va încerca îmbunătățirea gpu-ului cu o poziție în lista ordonată, după aceea cpu și la final stocarea. Dacă există un buget suficient de mare se va relua algoritmul începând cu gpu, etc.
Ieșire program.
Se garantează că toate opțiunile care lucrează cu date deja existente se vor citi după ce au fost executate opțiunile predecesoare lor.


echipament_electronic.h

#ifndef ECHIPAMENT_ELECTRONIC_H
#define ECHIPAMENT_ELECTRONIC_H

#include <string>

class Echipament_electronic {
protected:
    float pret;
    std::string nume;
    std::string tip;
    
public:
    Echipament_electronic(float, std::string, std::string);
    float get_pret();
    std::string get_nume();
    std::string get_tip();
    virtual void afisare() = 0;
    virtual float raport_calitate_pret() = 0;
};

#endif


echipament_electronic.cpp

#include "echipament_electronic.h"

Echipament_electronic::Echipament_electronic(float pret, std::string nume, std::string tip) : pret(pret), nume(nume), tip(tip) {}

float Echipament_electronic::get_pret() { return pret; }

std::string Echipament_electronic::get_nume() { return nume; }

std::string Echipament_electronic::get_tip() { return tip; }



main.cpp

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "echipament_electronic.h"

class Placa_baza : public Echipament_electronic {
private:
    std::string socket;
    
public:
    Placa_baza(float pret = 0.0f, std::string nume = "", std::string tip = "", std::string socket = "")
        : Echipament_electronic(pret, nume, tip), socket(socket) {}

    void afisare() override {
        std::cout << "placa_baza, " << nume << ", " << socket << ", " << pret << std::endl;
    }

    float raport_calitate_pret() override { return 0.0f; }

    std::string get_socket() {
        return socket;
    }
};

class CPU : public Echipament_electronic {
private:
    std::string socket;
    int frecventa;
    
public:
    CPU(float pret = 0.0f, std::string nume = "", std::string tip = "", std::string socket = "", int frecventa = 0)
        : Echipament_electronic(pret, nume, tip), socket(socket), frecventa(frecventa) {}

    void afisare() override {
        std::cout << "cpu, " << nume << ", " << socket << ", " << frecventa << ", " << pret << std::endl;
    }

    float raport_calitate_pret() override {
        return 1.0 * frecventa / pret;
    }

    std::string get_socket() {
        return socket;
    }
};

class GPU : public Echipament_electronic {
private:
    int memorie;
    
public:
    GPU(float pret = 0.0f, std::string nume = "", std::string tip = "", int memorie = 0)
        : Echipament_electronic(pret, nume, tip), memorie(memorie) {}

    void afisare() override {
        std::cout << "gpu, " << nume << ", " << memorie << ", " << pret << std::endl;
    }

    float raport_calitate_pret() override {
        return 1.0 * memorie / pret;
    }
};

class Stocare : public Echipament_electronic {
private:
    float memorie;
public:
    Stocare(float pret = 0.0f, std::string nume = "", std::string tip = "", float memorie = 0.0f)
        : Echipament_electronic(pret, nume, tip), memorie(memorie) {}

    void afisare() override {
        std::cout << "stocare, " << nume << ", " << memorie << ", " << pret << std::endl;
    }

    float raport_calitate_pret() override {
        return 1.0 * memorie / pret;
    }
};

class PC {
private:
    Placa_baza placa_baza;
    CPU cpu;
    GPU gpu;
    Stocare stocare;
    
public:
    PC(Placa_baza pb, CPU c, GPU g, Stocare s)
        : placa_baza(pb), cpu(c), gpu(g), stocare(s) {}
    
    void changeCPU(CPU c) { cpu = c; }
    
    void changeGPU(GPU g) { gpu = g; }
    
    void changeStocare(Stocare s) { stocare = s; }
    
    void afisare() {
        placa_baza.afisare();
        cpu.afisare();
        gpu.afisare();
        stocare.afisare();
    }
    
    int getPretTotal()
    {
        return placa_baza.get_pret() + cpu.get_pret() + gpu.get_pret() + stocare.get_pret();
    }
};

bool regulaSortareCPU (CPU& a, CPU& b) {
    return a.raport_calitate_pret() < b.raport_calitate_pret();
}

bool regulaSortareGPU (GPU& a, GPU& b) {
    return a.raport_calitate_pret() < b.raport_calitate_pret();
}
    
bool regulaSortareStocare (Stocare& a, Stocare& b) {
    return a.raport_calitate_pret() < b.raport_calitate_pret();
}

class Manager {
private:
    Placa_baza placa_baza;
    std::vector<CPU> cpus;
    std::vector<GPU> gpus;
    std::vector<Stocare> stocari;
    
public:
    Manager() {}
    void citire_componenta() {
        float pret;
        std::string nume, tip;
        
        std::cin >> pret >> nume >> tip;
        if (tip == "placa_baza") {
            std::string socket;
            std::cin >> socket;
            Placa_baza temp (pret, nume, tip, socket);
            placa_baza = temp;
        } else if (tip == "cpu") {
            std::string socket;
            int frecventa;
            std::cin >> socket >> frecventa;
            cpus.push_back(CPU(pret, nume, tip, socket, frecventa));
        } else if (tip == "gpu") {
            int memorie;
            std::cin >> memorie;
            gpus.push_back(GPU(pret, nume, tip, memorie));
        } else if (tip == "stocare") {
            float memorie;
            std::cin >> memorie;
            stocari.push_back(Stocare(pret, nume, tip, memorie));
        }
    }

    void afisare_componente() {
        placa_baza.afisare();
        for (auto& cpu : cpus) {
            cpu.afisare();
        }
        for (auto& gpu : gpus) {
            gpu.afisare();
        }
        for (auto& stocare : stocari) {
            stocare.afisare();
        }
    }

    void configurare_pc(std::string nume_cpu, std::string nume_gpu, std::string nume_stocare) {
        CPU cpu;
        GPU gpu;
        Stocare stocare;

        for (auto c : cpus) {
            if (c.get_nume() == nume_cpu) {
                cpu = c;
                break;
            }
        }

        // if (cpu.get_nume() == "") {
        //     std::cout << "CPU-ul nu a fost gasit." << std::endl;
        //     return;
        // }

        if (placa_baza.get_socket() != cpu.get_socket()) {
            std::cout << "Placa de baza este incompatibila cu CPU ales." << std::endl;
            return;
        }
        
        for (auto g : gpus) {
            if (g.get_nume() == nume_gpu) {
                gpu = g;
                break;
            }
        }

        // if (gpu.get_nume() == "") {
        //     std::cout << "GPU-ul nu a fost gasit." << std::endl;
        //     return;
        // }

        for (auto s : stocari) {
            if (s.get_nume() == nume_stocare) {
                stocare = s;
                break;
            }
        }

        // if (stocare.get_nume() == "") {
        //     std::cout << "Stocarea nu a fost gasita." << std::endl;
        //     return;
        // }

        PC pc(placa_baza, cpu, gpu, stocare);
        pc.afisare();
        std::cout << pc.getPretTotal() << std::endl;
    }
    
    int indexCheapestCPU()
    {
        int min = 99999;
        int rez;
        for(unsigned int i = 0; i < cpus.size(); i++)
        {
            if (cpus[i].get_pret() < min)
            {
                min = cpus[i].get_pret();
                rez = i;
            }
        }
        return rez;
    }
    
    int indexCheapestGPU()
    {
        int min = 99999;
        int rez;
        for(unsigned int i = 0; i < gpus.size(); i++)
        {
            if (gpus[i].get_pret() < min)
            {
                min = gpus[i].get_pret();
                rez = i;
            }
        }
        return rez;
    }
    
    int indexCheapestStocare()
    {
        int min = 99999;
        int rez;
        for(unsigned int i = 0; i < stocari.size(); i++)
        {
            if (stocari[i].get_pret() < min)
            {
                min = stocari[i].get_pret();
                rez = i;
            }
        }
        return rez;
    }
    
    void configurare_pc_optima(int buget) {
        std::sort(cpus.begin(), cpus.end(), regulaSortareCPU);
        std::sort(gpus.begin(), gpus.end(), regulaSortareGPU);
        std::sort(stocari.begin(), stocari.end(), regulaSortareStocare);
        
        int cpu_index = indexCheapestCPU();
        int gpu_index = indexCheapestGPU();
        int stocare_index = indexCheapestStocare();
        
        PC pc(placa_baza, cpus[cpu_index], gpus[gpu_index], stocari[stocare_index]); // verif compatibilitate socket placa baza - cpu
        
        int pret_total = pc.getPretTotal();
        PC previous_pc = pc; // store the previous valid configuration
        
        //int selector = 0;

        // pt gpu
        while (true) {
            if (gpu_index < gpus.size() - 1)
            {
                gpu_index++;
                pc.changeGPU(gpus[gpu_index]);
            } else break;
            
            pret_total = pc.getPretTotal();
            //std::cout << pret_total << std::endl;
            if (pret_total > buget) {
                break;
            } else previous_pc = pc;
            previous_pc = pc; // update the previous valid configuration
        }
        pc = previous_pc;
        
        // pt cpu
        while (true) {
            if (cpu_index < cpus.size() - 1)
            {
                cpu_index++;
                pc.changeCPU(cpus[cpu_index]); // verif compatibilitate socket placa baza - cpu
            } else break;
            
            pret_total = pc.getPretTotal();
            //std::cout << pret_total << std::endl;
            if (pret_total > buget) {
                break;
            }
            previous_pc = pc; // update the previous valid configuration
        }
        pc = previous_pc;
        
        // pt stocare
        while (true) {
            if (stocare_index < stocari.size() - 1)
            {
                stocare_index++;
                pc.changeStocare(stocari[stocare_index]); 
            } else break;
            
            pret_total = pc.getPretTotal();
            //std::cout << pret_total << std::endl;
            if (pret_total > buget) {
                break;
            }
            previous_pc = pc; // update the previous valid configuration
        }
        pc = previous_pc;
        
        pc.afisare();
    }
    
    void arataListaRaportCalitatePret() {
        for (auto& cpu : cpus) {
            std::cout << cpu.raport_calitate_pret() << std::endl;
        }
        for (auto& gpu : gpus) {
            std::cout << gpu.raport_calitate_pret() << std::endl;
        }
        for (auto& stocare : stocari) {
            std::cout << stocare.raport_calitate_pret() << std::endl;
        }
    }
};

int main() {
    Manager manager;
    bool running = true;

    while (running) {
        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1:
                manager.citire_componenta();
                break;
            case 2:
                manager.afisare_componente();
                break;
            case 3: {
                std::string nume_cpu, nume_gpu, nume_stocare;
                std::cin >> nume_cpu >> nume_gpu >> nume_stocare;
                manager.configurare_pc(nume_cpu, nume_gpu, nume_stocare);
                break;
            }
            case 4: {
                int buget;
                std::cin >> buget;
                manager.configurare_pc_optima(buget);
                // manager.afisare_componente();
                // manager.arataListaRaportCalitatePret();
                break;
            }
            case 5:
                running = false;
                break;
        }
    }

    return 0;
}
