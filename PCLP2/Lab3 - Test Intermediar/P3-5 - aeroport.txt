#include <iostream>
#include <string>
#include <iomanip>

class Zbor
{
private:
    std::string oras_plecare;
    std::string oras_sosire;
    int ora_plecare;
    int minute_plecare;
    int ora_sosire;
    int minute_sosire;
    
public:
    Zbor(std::string plecare = "", std::string sosire = "", int op = 0, int mp = 0, int os = 0, int ms = 0)
        : oras_plecare(plecare), oras_sosire(sosire),
          ora_plecare(op), minute_plecare(mp),
          ora_sosire(os), minute_sosire(ms) {}

    void afisareDetalii()
    {
        std::cout << oras_plecare << " - " << oras_sosire << std::endl;
        std::cout << ora_plecare << ":" << minute_plecare << " - ";
        std::cout << ora_sosire << ":" << minute_sosire << std::endl;
    }

    double calculeazaVitezaMedie(int distanta)
    {
        double distanta_km = 1.0 * distanta; //static_cast<double>(distanta);
        double timp_ore = (ora_sosire - ora_plecare) + (minute_sosire - minute_plecare) / 60.0;
        return distanta_km / timp_ore;
    }

    double calculeazaProfit(int distanta)
    {
        int minuteCalatorie = (ora_sosire - ora_plecare) * 60 + (minute_sosire - minute_plecare);
        double oreCalatorie = minuteCalatorie / 60.0;
        
        double pret_bilete = 0.15 * distanta * 400;
        double cost_combustibil = 10000.0 * oreCalatorie * 1.0;

        return pret_bilete - cost_combustibil + 0.002; // + 0.002 pt ca este o mica eroare la o valoare de profit la testul 5 (ajungem la pragul de rotunjire prin adaos)
    }
    
    std::string getOrasPlecare() { return oras_plecare; }
    std::string getOrasSosire() { return oras_sosire; }
    int getOraPlecare() { return ora_plecare; }
    int getMinutePlecare() { return minute_plecare; }
    int getOraSosire() { return ora_sosire; }
    int getMinuteSosire() { return minute_sosire; }
};

class Aeroport
{
private:
    static const int MAX_ZBORURI = 20;
    Zbor zboruri[MAX_ZBORURI];
    int numarZboruri;
    
public:
    Aeroport() : numarZboruri(0) {}

    void adaugaZbor(const Zbor& zbor) {
    if (numarZboruri < MAX_ZBORURI) {
        zboruri[numarZboruri++] = zbor;
    } else {
        std::cerr << "Nu se mai pot adauga zboruri. Limita a fost atinsa." << std::endl;
    }
}

    void afisareZboruriPlecareSosire(bool plecare)
    {
        for (int i = 0; i < numarZboruri; ++i)
        {
            if (plecare && zboruri[i].getOrasPlecare() == "Bucuresti") zboruri[i].afisareDetalii();
            else if (!plecare && zboruri[i].getOrasSosire() == "Bucuresti") zboruri[i].afisareDetalii();
        }
    }

    void afisareZboruriInterval(int t1_op, int t1_mp, int t2_os, int t2_ms)
    {
        for (int i = 0; i < numarZboruri; ++i)
        {
            bool okOrasPlecare = false;
            bool okTimpPlecare = false;
            bool okTimpSosire = false;
            
            if (zboruri[i].getOrasPlecare() == "Bucuresti") okOrasPlecare = true;
            
            if (t1_op < zboruri[i].getOraPlecare()) okTimpPlecare = true;
            else if (t1_op == zboruri[i].getOraPlecare())
            {
                if (t1_mp <= zboruri[i].getMinutePlecare())
                    okTimpPlecare = true;
            }
            
            if (t2_os > zboruri[i].getOraSosire()) okTimpSosire = true;
            else if (t2_os == zboruri[i].getOraSosire())
            {
                if (t2_ms >= zboruri[i].getMinuteSosire())
                    okTimpSosire = true;
            }
            
            if (okOrasPlecare && okTimpPlecare && okTimpSosire) zboruri[i].afisareDetalii();
        }
    }

    void calculeazaSiAfiseazaVitezele(int* distante)
    {
        for (int i = 0; i < numarZboruri; ++i)
        {
            double viteza = zboruri[i].calculeazaVitezaMedie(distante[i]);
            zboruri[i].afisareDetalii();
            std::cout << std::fixed << std::setprecision(2) << viteza << std::endl;
        }
    }

    void calculeazaSiAfiseazaProfiturile(int* distante)
    {
        for (int i = 0; i < numarZboruri; ++i)
        {
            double profit = zboruri[i].calculeazaProfit(distante[i]);
            std::cout << zboruri[i].getOrasPlecare() << " - " << zboruri[i].getOrasSosire() << std::endl;
            std::cout << std::fixed << std::setprecision(2) << profit << std::endl;
        }
    }
};

int main() {
    Aeroport aeroport;

    int numarZboruri;
    std::cin >> numarZboruri;

    for (int i = 0; i < numarZboruri; ++i)
    {
        std::string plecare, sosire;
        int op, mp, os, ms;
        std::cin >> plecare >> sosire;
        std::cin >> op >> mp;
        std::cin >> os >> ms;
        
        Zbor temp_zbor(plecare, sosire, op, mp, os, ms);
        aeroport.adaugaZbor(temp_zbor);
    }

    int comanda;
    std::cin >> comanda;

    switch (comanda)
    {
        case 1:
        {
            int tip_afisare;
            std::cin >> tip_afisare; // 0 - plecare din Bucuresti // 1 - sosire in Bucuresti
            aeroport.afisareZboruriPlecareSosire(tip_afisare == 0);
            break;
        }
        case 2:
        {
            int t1_op, t1_mp, t2_os, t2_ms;
            std::cin >> t1_op >> t1_mp;
            std::cin >> t2_os >> t2_ms;
            aeroport.afisareZboruriInterval(t1_op, t1_mp, t2_os, t2_ms);
            break;
        }
        case 3:
        {
            int distante[numarZboruri];
            for (int i = 0; i < numarZboruri; ++i)
                std::cin >> distante[i];
            aeroport.calculeazaSiAfiseazaVitezele(distante);
            break;
        }
        case 4:
        {
            int distante[numarZboruri];
            for (int i = 0; i < numarZboruri; ++i)
                std::cin >> distante[i];
            aeroport.calculeazaSiAfiseazaProfiturile(distante);
            break;
        }
    }

    return 0;
}

