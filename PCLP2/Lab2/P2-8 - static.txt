Să se scrie o clasă Pantof cu datele membre stil și mărime. Suplimentar, aceasta va conține o dată membră de tip întreg cu rolul de contor, ce va reține numărul de obiecte create, și o dată membră care reține numărul maxim de obiecte ce pot fi create din această clasă (se presupune că sunt în ediție limitată). Dacă la tentativa de instanțiere a unui obiect se constată că s-a atins deja numărul maxim de obiecte ce pot fi instanțiate se va afișa pe ecran mesajul “S-a atins pragul maxim din editia limitata!”. Toate inițializările din constructori vor fi făcute cu ajutorul listei de inițializare.
În programul principal se vor citi de la tastatură, de pe linii diferite, următoarele date:

un întreg m, reprezentând numărul maxim de Pantofi pe care îi putem instanția;

un întreg n, reprezentând numărul de obiecte pe care le vom instanția;

n perechi de date de tipul std::string și int, reprezentând stilul și mărimea, câte o pereche pe fiecare rând. Stilul este reprezentat de un singur cuvânt.

După fiecare instanțiere se vor afișa pe ecran stilul și marimea, separate de un spațiu și urmate de caracterul newline.

Extensie: separați declarația clasei și definițiile funcțiilor membre în fișiere diferite.
Extensie 2: cele n instanțe ale clasei Pantof vor fi reținute sub forma unui vector static de obiecte.
Extensie 3: cele n instanțe ale clasei Pantof vor fi reținute sub forma unui vector dinamic de obiecte.


#include <iostream>
#include <string>

class Pantof
{
private:
    static int contor; // data membra statica ste partajata intre toate instantele clasei Pantof
    static int numarMaxim; // data membra statica ste partajata intre toate instantele clasei Pantof
    std::string stil;
    int marime;
    
public:
    Pantof(const std::string& _stil, int _marime) : stil(_stil), marime(_marime)
    {
        if (contor >= numarMaxim)
        {
            std::cout << "S-a atins pragul maxim din editia limitata!\n";
            return; // se iese din constructor "prematur" in cazul mentionat
        }
        contor++;
        display(); // apelam functia de display in constructor
    }
    
    void display()
    {
        std::cout << stil << " " << marime;
        std::cout << std::endl;
    }
    
    static void setNumarMaxim(int _numarMaxim) { numarMaxim = _numarMaxim; }
};

int Pantof::contor = 0;  // init val statica
int Pantof::numarMaxim = 0; // init val statica

int main()
{
    int m, n;
    std::cin >> m;
    Pantof::setNumarMaxim(m);
    std::cin >> n;

    std::string temp_stil;
    int temp_marime;
    for (int i = 0; i < n; ++i) // fiecare obiect de tip Pantof are scope local si nu este pastrat pt acces ulterior
    {
        std::cin >> temp_stil >> temp_marime;
        Pantof pantof(temp_stil, temp_marime);
    }

    return 0;
}
