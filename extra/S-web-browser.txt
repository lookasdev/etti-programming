Să se scrie o aplicație de tip web browser pentru gestiunea funcționalității de navigare între diferite pagini web. În acest sens, se vor "genera" mai multe pagini web și se va implementa un browser care va putea accesa o pagină prin intermediul URL-ului și a butoanelor back/forward. 

O pagină web este caracterizată de câmpurile:

url
titlu
conținut
Oricare dintre paginile web poate accesa oricare dintre celelalte pagini web (are link direct) și accesul se poate face dintr-o clasă Browser, printr-una dintre funcțiile:

link(std::string)
back(void)
forward(void)
Browser-ul poate utiliza o referință/pointer la pagina curentă, care se va muta la diferite pagini, pe măsură ce sunt accesate. De asemenea, navigarea între paginile web va fi stocată în memorie pentru a putea reface istoricul navigării prin funcțiile back/forward. Această istorie poate fi implementată sub forma unei liste dublu înlănțuite, cu o modificare: accesarea unei noi pagini prin funcția link(std::string) va șterge din listă toate paginile reținute după punctul curent și va introduce în listă noul link. De exemplu, următoarea succesiune de apelări va avea efectele menționate - pagina curentă este indicată îngroșat:
link(pag_1) - introduce pag_1 în memorie: pag_1
link(pag_2) - introduce pag_2 în memorie: pag_1 -> pag_2
link(pag_3) - introduce pag_3 în memorie: pag_1 -> pag_2 -> pag_3
link(pag_4) - introduce pag_4 în memorie: pag_1 -> pag_2 -> pag_3 -> pag_4
back() - se mută cu o poziție în memorie: pag_1 -> pag_2 -> pag_3 -> pag_4
back() - se mută cu o poziție în memorie: pag_1 -> pag_2 -> pag_3 -> pag_4
forward() - se mută cu o poziție în memorie: pag_1 -> pag_2 -> pag_3 -> pag_4
back() - se mută cu o poziție în memorie: pag_1 -> pag_2 -> pag_3 -> pag_4
link(pag_5) - se șterg toate intrările din memorie care urmează după pagina curentă și se introduce pag_5 în memorie: pag_1 -> pag_2 -> pag_5
Dacă nu mai există nicio pagină în spate/față când se apelează funcțiile back()/forward(), respectiv, pagina curentă nu se modifică.

De la tastatură se va citi un întreg. În funcție de valoarea lui, se vor executa următoarele comenzi:
Generare pagină. Se vor citi, suplimentar, următoarele date, fiecare de tipul std::string:
url
titlu
conținut
Accesare pagină (funcția link) după url. Se introduce de la tastatură un std::string suplimentar și se va naviga către pagina respectivă, reținându-se, în același timp, în memoria browser-ului. Se garantează că pagina respectivă există și este unică.
Afișare pagină. Se vor afișa, pe rânduri diferite:
url
titlu
conținut
Navigare în spate: funcția back()
Navigare în față: funcția forward()
Ieșire din program.


#include <iostream>
#include <string>
#include <vector>

class Webpage {
private:
    std::string url;
    std::string title;
    std::string content;

public:
    Webpage(const std::string& url = "", const std::string& title = "", const std::string& content = "")
        : url(url), title(title), content(content) {}
        
    std::string getUrl() const { return url; }
    std::string getTitle() const { return title; }
    std::string getContent() const { return content; }
};

class Browser {
private:
    std::vector<Webpage> pages;
    std::vector<Webpage> history;
    int currentPageIndex = -1;

public:

    void addPage(const std::string& url, const std::string& title, const std::string& content) {
        Webpage temp(url, title, content);
        pages.push_back(temp);
    }

    void link(const std::string& url) {
        for (const auto& page : pages) {
            if (page.getUrl() == url) {
                if (currentPageIndex < history.size() - 1) { // verifica daca exista pagini in istoric care urmeaza dupa pagina curenta (size incepe de la 1)
                    history.erase(history.begin() + currentPageIndex + 1, history.end()); //vectorul history este redimensionat astfel incat sa pastreze doar paginile pana la si inclusiv pagina curenta (index incepe de la 0)
                }
                history.push_back(page);
                currentPageIndex++;
                return;
            }
        }
        std::cout << "Page not found\n";
    }

    void back() {
        if (currentPageIndex > 0) {
            currentPageIndex--;
        }
    }

    void forward() {
        if (currentPageIndex < history.size() - 1) {
            currentPageIndex++;
        }
    }

    void displayCurrentPage() const {
        if (currentPageIndex >= 0 && currentPageIndex < history.size()) {
            const Webpage& page = history[currentPageIndex];
            std::cout << page.getUrl() << "\n" << page.getTitle() << "\n" << page.getContent() << "\n";
        } else {
            std::cout << "No page to display\n";
        }
    }
};

int main() {
    Browser browser;
    int comanda;

    while (true) {
        std::cin >> comanda;

        if (comanda == 1) {
            std::string url, title, content;
            std::cin.ignore();
            std::getline(std::cin, url);
            std::getline(std::cin, title);
            std::getline(std::cin, content);
            browser.addPage(url, title, content);
        } else if (comanda == 2) {
            std::string url;
            std::cin.ignore();
            std::getline(std::cin, url);
            browser.link(url);
        } else if (comanda == 3) {
            browser.displayCurrentPage();
        } else if (comanda == 4) {
            browser.back();
        } else if (comanda == 5) {
            browser.forward();
        } else if (comanda == 6) {
            break;
        }
    }

    return 0;
}
